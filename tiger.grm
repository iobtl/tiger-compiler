%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | UMINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 

%nonterm  exp | program | lval | lval' | exps | exp_seq | field_list | declaration_list | declaration 
        | ty_declaration | ty | ty_fields | ty_field | var_declaration | func_declaration 


%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%right OF
%nonassoc DO
%nonassoc ELSE
%nonassoc ASSIGN
%left OR
%left AND 
%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

program	: exp				()

declaration_list : ()
  | declaration declaration_list()

declaration : 
    ty_declaration ()
  | var_declaration ()
  | func_declaration ()

ty_declaration : TYPE ID EQ ty ()

ty :
    ID ()
  | LBRACE ty_fields RBRACE ()
  | ARRAY OF ID ()

ty_field :  ()
  | COMMA ID COLON ID ty_field ()

ty_fields : ()
  | ID COLON ID ty_field ()

var_declaration :
    VAR ID ASSIGN exp ()
  | VAR ID COLON ID ASSIGN exp ()

func_declaration :
    FUNCTION ID LPAREN ty_fields RPAREN EQ exp ()
  | FUNCTION ID LPAREN ty_fields RPAREN COLON ID EQ exp ()


field_list : ()
  | ID EQ exp ()
  | field_list COMMA ID EQ exp ()

exps : ()
  | exp ()
  | exps COMMA exp ()

exp_seq : ()
  | exp ()
  | exp_seq SEMICOLON exp ()

lval : 
    ID  ()
  | lval' ()

lval' : 
    lval DOT ID ()
  | lval' LBRACK exp RBRACK () (* circumvent shift-reduce conflict; ID LBRACK exp RBRACK _OF_ exp; parser cannot look ahead to OF *)

exp: 			                     
    ID                                   ()
  | lval'                                ()
  | NIL                                  ()
  | INT                                  ()
  | STRING                               ()
  | MINUS exp %prec UMINUS               ()
  | LPAREN exp_seq RPAREN                ()
  | ID LPAREN exps RPAREN                ()
  | ID LBRACE field_list RBRACE          () 
  | ID LBRACK exp RBRACK OF exp          ()
  | lval ASSIGN exp                      ()
  | IF exp THEN exp ELSE exp             ()
  | IF exp THEN exp %prec DO             () (* make lower precedence than a close ELSE statement *)
  | WHILE exp DO exp                     ()
  | FOR ID ASSIGN exp TO exp DO exp      ()
  | BREAK                                ()
  | LET declaration_list IN exp_seq END  ()
  | exp MINUS exp                        ()
  | exp DIVIDE exp                       ()
  | exp TIMES exp                        ()
  | exp EQ exp                           ()
  | exp NEQ exp                          ()
  | exp GT exp                           ()
  | exp LT exp                           ()
  | exp GE exp                           ()
  | exp LE exp                           ()
  | exp AND exp                          ()
  | exp OR exp                           ()
  | exp PLUS exp                         ()
