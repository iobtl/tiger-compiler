structure A = Absyn
type symbol = Symbol.symbol

%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | UMINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 

%nonterm  exp of A.exp 
        | program of A.exp 
        | lval of A.var 
        | lval' of A.var 
        | exps of A.exp list 
        | exp_seq of (A.exp * pos) list
        | field_list of (symbol * A.exp * pos) list 
        | declaration_list of A.dec list
        | declaration of A.dec
        | ty_declaration of {name: symbol, ty: A.ty, pos: pos}
        | ty of A.ty
        | ty_fields of A.field list
        | ty_field of A.field
        | var_declaration of A.dec
        | func_declaration of A.fundec


%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%right OF
%nonassoc DO
%nonassoc ELSE
%nonassoc ASSIGN
%left OR
%left AND 
%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
	DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%
(* Recall that value produced by every semantic expression must match type of nonterminal *)

program	: exp				(exp)

declaration_list :               ([])
  | declaration declaration_list (declaration::declaration_list)

declaration : 
    ty_declaration   (A.TypeDec([ty_declaration]))
  | var_declaration  (var_declaration)
  | func_declaration (A.FunctionDec([func_declaration]))

ty_declaration : TYPE ID EQ ty ({name=(Symbol.symbol ID), ty=ty, pos=TYPEleft})

ty :
    ID                      (A.NameTy(Symbol.symbol ID, IDleft))
  | LBRACE ty_fields RBRACE (A.RecordTy(ty_fields))
  | ARRAY OF ID             (A.ArrayTy(Symbol.symbol ID, ARRAYleft))

ty_field : ID COLON ID ({name=(Symbol.symbol ID1), escape=ref true, typ=(Symbol.symbol ID2), pos=ID1left})

ty_fields :                  ([])
  | ty_field ty_fields       (ty_field::ty_fields)
  | COMMA ty_field ty_fields (ty_field::ty_fields)

var_declaration :
    VAR ID ASSIGN exp          (A.VarDec({name=(Symbol.symbol ID), escape=ref true, typ=NONE, init=exp, pos=IDleft}))
  | VAR ID COLON ID ASSIGN exp (A.VarDec({name=(Symbol.symbol ID1), escape=ref true, typ=SOME(Symbol.symbol ID2, ID2left), init=exp, pos=ID1left}))

func_declaration :
    FUNCTION ID LPAREN ty_fields RPAREN EQ exp          ({name=(Symbol.symbol ID), params=ty_fields, result=NONE, body=exp, pos=FUNCTIONleft})
  | FUNCTION ID LPAREN ty_fields RPAREN COLON ID EQ exp ({name=(Symbol.symbol ID1), params=ty_fields, result=SOME(Symbol.symbol ID2, ID2left), body=exp, pos=FUNCTIONleft})


field_list :                   ([])
  | ID EQ exp                  ([(Symbol.symbol ID, exp, IDleft)])
  | ID EQ exp COMMA field_list ((Symbol.symbol ID, exp, IDleft)::field_list)

exps :             ([])
  | exp            ([exp])
  | exp COMMA exps (exp::exps)

exp_seq :                 ([])
  | exp                   ([(exp, expleft)])
  | exp SEMICOLON exp_seq ((exp, expleft)::exp_seq)

lval : 
    ID    (A.SimpleVar(Symbol.symbol ID, IDleft))
  | lval' (lval')

lval' : 
    lval DOT ID             (A.FieldVar(lval, Symbol.symbol ID, lvalleft))
  | lval' LBRACK exp RBRACK (A.SubscriptVar(lval', exp, lval'left)) (* circumvent shift-reduce conflict; ID LBRACK exp RBRACK _OF_ exp; parser cannot look ahead to OF *)

exp: 			                     
    ID                                   (A.VarExp(A.SimpleVar(Symbol.symbol ID, IDleft)))
  | lval'                                (A.VarExp(lval'))
  | NIL                                  (A.NilExp)
  | INT                                  (A.IntExp(INT))
  | STRING                               (A.StringExp(STRING, STRINGleft))
  | MINUS exp %prec UMINUS               (A.OpExp({left=A.IntExp(0), oper=A.MinusOp, right=exp, pos=MINUSleft}))
  | LPAREN exp_seq RPAREN                (A.SeqExp(exp_seq))
  | ID LPAREN exps RPAREN                (A.CallExp({func=(Symbol.symbol ID), args=exps, pos=IDleft}))
  | ID LBRACE field_list RBRACE          (A.RecordExp({fields=field_list, typ=(Symbol.symbol ID), pos=IDleft})) 
  | ID LBRACK exp RBRACK OF exp          (A.ArrayExp({typ=(Symbol.symbol ID), size=exp1, init=exp2, pos=IDleft}))
  | lval ASSIGN exp                      (A.AssignExp({var=lval, exp=exp, pos=ASSIGNleft}))
  | IF exp THEN exp ELSE exp             (A.IfExp({test=exp1, then'=exp2, else'=SOME(exp3), pos=IFleft}))
  | IF exp THEN exp %prec DO             (A.IfExp({test=exp1, then'=exp2, else'=NONE, pos=IFleft})) (* make lower precedence than a close ELSE statement *)
  | WHILE exp DO exp                     (A.WhileExp({test=exp1, body=exp2, pos=WHILEleft}))
  | FOR ID ASSIGN exp TO exp DO exp      (A.ForExp({var=(Symbol.symbol ID), escape=ref true, lo=exp1, hi=exp2, body=exp3, pos=FORleft}))
  | BREAK                                (A.BreakExp(BREAKleft))
  | LET declaration_list IN exp_seq END  (A.LetExp({decs=declaration_list, body=A.SeqExp(exp_seq), pos=LETleft}))
  | exp MINUS exp                        (A.OpExp({left=exp1, oper=A.MinusOp, right=exp2, pos=MINUSleft}))
  | exp DIVIDE exp                       (A.OpExp({left=exp1, oper=A.DivideOp, right=exp2, pos=DIVIDEleft}))
  | exp TIMES exp                        (A.OpExp({left=exp1, oper=A.TimesOp, right=exp2, pos=TIMESleft}))
  | exp EQ exp                           (A.OpExp({left=exp1, oper=A.EqOp, right=exp2, pos=EQleft}))
  | exp NEQ exp                          (A.OpExp({left=exp1, oper=A.NeqOp, right=exp2, pos=NEQleft}))
  | exp GT exp                           (A.OpExp({left=exp1, oper=A.GtOp, right=exp2, pos=GTleft}))
  | exp LT exp                           (A.OpExp({left=exp1, oper=A.LtOp, right=exp2, pos=LTleft}))
  | exp GE exp                           (A.OpExp({left=exp1, oper=A.GeOp, right=exp2, pos=GEleft}))
  | exp LE exp                           (A.OpExp({left=exp1, oper=A.LeOp, right=exp2, pos=LEleft}))
  | exp AND exp                          (A.IfExp({test=exp1, then'=exp2, else'=SOME(A.IntExp(0)), pos=ANDleft}))
  | exp OR exp                           (A.IfExp({test=exp1, then'=A.IntExp(1), else'=SOME(exp2), pos=ORleft}))
  | exp PLUS exp                         (A.OpExp({left=exp1, oper=A.PlusOp, right=exp2, pos=PLUSleft}))
